openapi: 3.0.0
info:
  title: River Pet Sitting Service
  description: "This is the API definition for the River Pet Sitting Service."
  version: 1.0.0

servers:
  - url: http://localhost:3000

tags:
  - name: Reservations
    description: Create, view, delete, and update reservations

  - name: Pets
    description: View, update and add pets to a profile

paths:

  /reservations:
    post:
      tags:
        - Reservations
      summary: Create a new reservation (CreateReservationLambda)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                endDate:
                  type: string
                ownerId:
                  type: string
                pets:
                  type: array
                  items:
                    type: string
                sitterId:
                  type: string
      responses:
        "200":
          description: A reservation object
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservationId:
                    type: string
                  startDate:
                    type: string
                  endDate:
                    type: string
                  status:
                    type: string
                  ownerId:
                    type: string
                  pets:
                    type: array
                    items:
                      type: string
                  sitterId:
                    type: string
    get:
      tags:
        - Reservations
      summary: Get all reservations (GetReservationLambda). Owner Id will be pulled from cognito.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ownerId:
                  type: string
      responses:
        "200":
          description: All reservations
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservationList:
                    type: array
                    items:
                      properties:
                        reservationId:
                          type: string
                        startDate:
                          type: string
                        endDate:
                          type: string
                        status:
                          type: string



  /reservations/{reservationId}:
    get:
      tags:
        - Reservations
      summary: Get an existing reservation (GetReservationLambda). Owner Id will be pulled from cognito.
      parameters:
        - name: reservationId
          in: path
          description: reservationId to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ReservationResponse
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservationId:
                    type: string
                  startDate:
                    type: string
                  endDate:
                    type: string
                  status:
                    type: string
                  ownerId:
                    type: string
                  pets:
                    type: array
                    items:
                      type: string
                  sitterId:
                    type: string
        "404":
          description: "Reservation not found"

        "500":
          description: "Invalid input"

    put:
      tags:
        - Reservations
      summary: Update the existing Reservation (UpdateReservationLambda)
      parameters:
        - name: reservationId
          in: path
          description: Reservation to update
          required: true
          schema:
            type: string

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                endDate:
                  type: string
                ownerId:
                  type: string

      responses:
        "200":
          description: ReservationResponse
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservationId:
                    type: string
                  startDate:
                    type: string
                  endDate:
                    type: string
                  status:
                    type: string
                  ownerId:
                    type: string
                  pets:
                    type: array
                    items:
                      type: string
                  sitterId:
                    type: string
        "500":
          description: "Invalid input parameters"

    delete:
      tags:
        - Reservations
      summary: Delete an existing Reservation (CancelReservationLambda)
      parameters:
        - name: reservationId
          in: path
          description: reservationId to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ReservationResponse
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservationId:
                    type: string

  /pets/{petId}:
    get:
      tags:
        - Pets
      summary: Retrieves a pet(GetPetLambda)
      operationId: getPet
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A pet object
          content:
            application/json:
              schema:
                type: object
                properties:
                  petId:
                    type: string
                  ownerId:
                    type: string
                  petName:
                    type: string
    put:
      tags:
        - Pets
      summary: Updates a pet a user owns (UpdatePetLambda)
      operationId: updatePet
      parameters:
        - name: petId
          in: path
          description: Id of pet to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                petName:
                  type: string
      responses:
        "200":
          description: An updated pet object
          content:
            application/json:
              schema:
                type: object
                properties:
                  petId:
                    type: string
                  ownerId:
                    type: string
                  petName:
                    type: string
        "500":
          description: "Invalid input parameters"

  /pets:
    post:
      tags:
        - Pets
      summary: Add a pet to a profile (createPetLambda)
      operationId: createPet
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ownerId:
                  type: string
                petName:
                  type: string

      responses:
        "200":
          description: the pet that got added.
          content:
            application/json:
              schema:
                type: object
                properties:
                  petId:
                    type: string
                  ownerId:
                    type: string
                  petName:
                    type: string

    get:
      tags:
        - Pets
      summary: Get all pets (GetPetLambda). Owner Id will be pulled from cognito.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ownerId:
                  type: string
      responses:
        "200":
          description: All pets
          content:
            application/json:
              schema:
                type: object
                properties:
                  petList:
                    type: array
                    items:
                      properties:
                        petId:
                          type: string
                        petName:
                          type: string

